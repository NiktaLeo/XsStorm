
import React from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Vulnerability } from "@/types/scanner";
import { AlertTriangle, AlertCircle, CheckCircle, Shield, Copy } from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
}

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability }) => {
  // Set color based on vulnerability type
  const getTypeColor = (type: string) => {
    switch (type) {
      case 'Reflected':
        return 'bg-amber-500';
      case 'Stored':
        return 'bg-red-500';
      case 'DOM-Based':
        return 'bg-purple-500';
      case 'Blind':
        return 'bg-blue-500';
      default:
        return 'bg-gray-500';
    }
  };
  
  // Set color based on severity
  const getSeverityColor = (severity: string | undefined) => {
    switch (severity) {
      case 'critical':
        return 'border-red-700 bg-red-50 text-red-700';
      case 'high':
        return 'border-red-500 bg-red-50 text-red-600';
      case 'medium':
        return 'border-amber-500 bg-amber-50 text-amber-700';
      case 'low':
        return 'border-blue-500 bg-blue-50 text-blue-700';
      default:
        return 'border-gray-300 bg-gray-50 text-gray-600';
    }
  };
  
  // Set icon and color based on vulnerability status
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'confirmed':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'potential':
        return <AlertTriangle className="h-4 w-4 text-amber-400" />;
      case 'false-positive':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      default:
        return null;
    }
  };
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success("Copied to clipboard");
  };

  return (
    <Card className="overflow-hidden border-muted bg-card">
      <CardHeader className="px-4 py-3 bg-secondary">
        <div className="flex justify-between items-center">
          <CardTitle className="text-sm font-mono flex items-center gap-1">
            <Badge className={getTypeColor(vulnerability.type)}>
              {vulnerability.type}
            </Badge>
            {vulnerability.parameter}
          </CardTitle>
          <div className="flex items-center gap-2">
            {vulnerability.severity && (
              <Badge variant="outline" className={getSeverityColor(vulnerability.severity)}>
                {vulnerability.severity}
              </Badge>
            )}
            <span className="flex items-center gap-1">
              {getStatusIcon(vulnerability.status)}
              <span className="text-xs opacity-70 capitalize">{vulnerability.status}</span>
            </span>
          </div>
        </div>
        <CardDescription className="text-xs truncate">
          {vulnerability.url}
        </CardDescription>
      </CardHeader>
      <CardContent className="px-4 py-3">
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <div className="text-xs">
              <span className="text-muted-foreground">Context:</span> <Badge variant="outline" className="ml-1 font-mono">{vulnerability.context}</Badge>
              {vulnerability.parameterType && (
                <>
                  <span className="text-muted-foreground ml-2">Type:</span> <Badge variant="outline" className="ml-1 font-mono">{vulnerability.parameterType}</Badge>
                </>
              )}
            </div>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    className="h-6 w-6"
                    onClick={() => copyToClipboard(vulnerability.payload)}
                  >
                    <Copy className="h-3.5 w-3.5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p className="text-xs">Copy payload</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
          <div className="bg-secondary p-2 rounded-md">
            <pre className="text-xs font-mono whitespace-pre-wrap break-all">{vulnerability.payload}</pre>
          </div>
          {vulnerability.evidence && (
            <div className="text-xs text-muted-foreground mt-1">
              <span className="font-medium">Evidence:</span> {vulnerability.evidence}
            </div>
          )}
          {vulnerability.wafBypassed && (
            <div className="flex items-center text-xs text-security-warning mt-1 gap-1">
              <Shield className="h-3 w-3" />
              <span>WAF bypass successful</span>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="px-4 py-2 bg-secondary/50 text-xs text-muted-foreground border-t border-muted">
        {new Date(vulnerability.timestamp).toLocaleTimeString()}
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityCard;
